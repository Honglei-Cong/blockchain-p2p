// Code generated by protoc-gen-go.
// source: consensus/consensus.proto
// DO NOT EDIT!

/*
Package consensus is a generated protocol buffer package.

It is generated from these files:
	consensus/consensus.proto

It has these top-level messages:
	NewRoundStepMessage
	BitArray
	CommitStepMessage
	Proposal
	ProposalMessage
	ProposalPOLMessage
	SimpleProof
	Part
	BlockPartMessage
	VoteMessage
	HasVoteMessage
	VoteSetMaj23Message
	VoteSetBitsMessage
	ProposalHeartbeatMessage
*/
package consensus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/9thchain/blockchain-p2p/protos/common"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RoundStepType int32

const (
	RoundStepType_Unknown       RoundStepType = 0
	RoundStepType_NewHeight     RoundStepType = 1
	RoundStepType_NewRound      RoundStepType = 2
	RoundStepType_Propose       RoundStepType = 3
	RoundStepType_Prevote       RoundStepType = 4
	RoundStepType_PrevoteWait   RoundStepType = 5
	RoundStepType_Precommit     RoundStepType = 6
	RoundStepType_PrecommitWait RoundStepType = 7
	RoundStepType_Commit        RoundStepType = 8
)

var RoundStepType_name = map[int32]string{
	0: "Unknown",
	1: "NewHeight",
	2: "NewRound",
	3: "Propose",
	4: "Prevote",
	5: "PrevoteWait",
	6: "Precommit",
	7: "PrecommitWait",
	8: "Commit",
}
var RoundStepType_value = map[string]int32{
	"Unknown":       0,
	"NewHeight":     1,
	"NewRound":      2,
	"Propose":       3,
	"Prevote":       4,
	"PrevoteWait":   5,
	"Precommit":     6,
	"PrecommitWait": 7,
	"Commit":        8,
}

func (x RoundStepType) String() string {
	return proto.EnumName(RoundStepType_name, int32(x))
}
func (RoundStepType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NewRoundStepMessage struct {
	Height                uint64        `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round                 uint32        `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Step                  RoundStepType `protobuf:"varint,3,opt,name=step,enum=consensus.RoundStepType" json:"step,omitempty"`
	SecondsSinceStartTime uint32        `protobuf:"varint,4,opt,name=secondsSinceStartTime" json:"secondsSinceStartTime,omitempty"`
	LastCommitRound       uint32        `protobuf:"varint,5,opt,name=lastCommitRound" json:"lastCommitRound,omitempty"`
}

func (m *NewRoundStepMessage) Reset()                    { *m = NewRoundStepMessage{} }
func (m *NewRoundStepMessage) String() string            { return proto.CompactTextString(m) }
func (*NewRoundStepMessage) ProtoMessage()               {}
func (*NewRoundStepMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BitArray struct {
	Bits  uint32   `protobuf:"varint,1,opt,name=bits" json:"bits,omitempty"`
	Elems []uint64 `protobuf:"varint,2,rep,packed,name=elems" json:"elems,omitempty"`
}

func (m *BitArray) Reset()                    { *m = BitArray{} }
func (m *BitArray) String() string            { return proto.CompactTextString(m) }
func (*BitArray) ProtoMessage()               {}
func (*BitArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CommitStepMessage struct {
	Height          uint64                `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	BlockPartHeader *common.PartSetHeader `protobuf:"bytes,2,opt,name=blockPartHeader" json:"blockPartHeader,omitempty"`
	BlockParts      *BitArray             `protobuf:"bytes,3,opt,name=blockParts" json:"blockParts,omitempty"`
}

func (m *CommitStepMessage) Reset()                    { *m = CommitStepMessage{} }
func (m *CommitStepMessage) String() string            { return proto.CompactTextString(m) }
func (*CommitStepMessage) ProtoMessage()               {}
func (*CommitStepMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommitStepMessage) GetBlockPartHeader() *common.PartSetHeader {
	if m != nil {
		return m.BlockPartHeader
	}
	return nil
}

func (m *CommitStepMessage) GetBlockParts() *BitArray {
	if m != nil {
		return m.BlockParts
	}
	return nil
}

type Proposal struct {
	Height           uint64                     `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round            uint32                     `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Timestamp        *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	BlockPartsHeader *common.PartSetHeader      `protobuf:"bytes,4,opt,name=blockPartsHeader" json:"blockPartsHeader,omitempty"`
	POLRound         int32                      `protobuf:"varint,5,opt,name=POLRound" json:"POLRound,omitempty"`
	Signatuure       []byte                     `protobuf:"bytes,6,opt,name=signatuure,proto3" json:"signatuure,omitempty"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Proposal) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Proposal) GetBlockPartsHeader() *common.PartSetHeader {
	if m != nil {
		return m.BlockPartsHeader
	}
	return nil
}

type ProposalMessage struct {
	Proposal *Proposal `protobuf:"bytes,1,opt,name=Proposal" json:"Proposal,omitempty"`
}

func (m *ProposalMessage) Reset()                    { *m = ProposalMessage{} }
func (m *ProposalMessage) String() string            { return proto.CompactTextString(m) }
func (*ProposalMessage) ProtoMessage()               {}
func (*ProposalMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProposalMessage) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

type ProposalPOLMessage struct {
	Height           uint64    `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	ProposalPOLRound uint32    `protobuf:"varint,2,opt,name=proposalPOLRound" json:"proposalPOLRound,omitempty"`
	ProposalPOL      *BitArray `protobuf:"bytes,3,opt,name=proposalPOL" json:"proposalPOL,omitempty"`
}

func (m *ProposalPOLMessage) Reset()                    { *m = ProposalPOLMessage{} }
func (m *ProposalPOLMessage) String() string            { return proto.CompactTextString(m) }
func (*ProposalPOLMessage) ProtoMessage()               {}
func (*ProposalPOLMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ProposalPOLMessage) GetProposalPOL() *BitArray {
	if m != nil {
		return m.ProposalPOL
	}
	return nil
}

type SimpleProof struct {
	Aunts [][]byte `protobuf:"bytes,1,rep,name=aunts,proto3" json:"aunts,omitempty"`
}

func (m *SimpleProof) Reset()                    { *m = SimpleProof{} }
func (m *SimpleProof) String() string            { return proto.CompactTextString(m) }
func (*SimpleProof) ProtoMessage()               {}
func (*SimpleProof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Part struct {
	Index uint64       `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Bytes []byte       `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Proof *SimpleProof `protobuf:"bytes,3,opt,name=proof" json:"proof,omitempty"`
	Hash  []byte       `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Part) Reset()                    { *m = Part{} }
func (m *Part) String() string            { return proto.CompactTextString(m) }
func (*Part) ProtoMessage()               {}
func (*Part) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Part) GetProof() *SimpleProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type BlockPartMessage struct {
	Height uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round  uint32 `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Part   *Part  `protobuf:"bytes,3,opt,name=part" json:"part,omitempty"`
}

func (m *BlockPartMessage) Reset()                    { *m = BlockPartMessage{} }
func (m *BlockPartMessage) String() string            { return proto.CompactTextString(m) }
func (*BlockPartMessage) ProtoMessage()               {}
func (*BlockPartMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BlockPartMessage) GetPart() *Part {
	if m != nil {
		return m.Part
	}
	return nil
}

type VoteMessage struct {
	Vote *common.Vote `protobuf:"bytes,1,opt,name=vote" json:"vote,omitempty"`
}

func (m *VoteMessage) Reset()                    { *m = VoteMessage{} }
func (m *VoteMessage) String() string            { return proto.CompactTextString(m) }
func (*VoteMessage) ProtoMessage()               {}
func (*VoteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VoteMessage) GetVote() *common.Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type HasVoteMessage struct {
	Height uint64          `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round  uint32          `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type   common.VoteType `protobuf:"varint,3,opt,name=type,enum=common.VoteType" json:"type,omitempty"`
	Index  uint32          `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
}

func (m *HasVoteMessage) Reset()                    { *m = HasVoteMessage{} }
func (m *HasVoteMessage) String() string            { return proto.CompactTextString(m) }
func (*HasVoteMessage) ProtoMessage()               {}
func (*HasVoteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type VoteSetMaj23Message struct {
	Height  uint64          `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round   uint32          `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type    common.VoteType `protobuf:"varint,3,opt,name=type,enum=common.VoteType" json:"type,omitempty"`
	BlockID *common.BlockID `protobuf:"bytes,4,opt,name=blockID" json:"blockID,omitempty"`
}

func (m *VoteSetMaj23Message) Reset()                    { *m = VoteSetMaj23Message{} }
func (m *VoteSetMaj23Message) String() string            { return proto.CompactTextString(m) }
func (*VoteSetMaj23Message) ProtoMessage()               {}
func (*VoteSetMaj23Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *VoteSetMaj23Message) GetBlockID() *common.BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

type VoteSetBitsMessage struct {
	Height  uint64          `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round   uint32          `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type    common.VoteType `protobuf:"varint,3,opt,name=type,enum=common.VoteType" json:"type,omitempty"`
	BlockID *common.BlockID `protobuf:"bytes,4,opt,name=blockID" json:"blockID,omitempty"`
	Votes   *BitArray       `protobuf:"bytes,5,opt,name=votes" json:"votes,omitempty"`
}

func (m *VoteSetBitsMessage) Reset()                    { *m = VoteSetBitsMessage{} }
func (m *VoteSetBitsMessage) String() string            { return proto.CompactTextString(m) }
func (*VoteSetBitsMessage) ProtoMessage()               {}
func (*VoteSetBitsMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *VoteSetBitsMessage) GetBlockID() *common.BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *VoteSetBitsMessage) GetVotes() *BitArray {
	if m != nil {
		return m.Votes
	}
	return nil
}

type ProposalHeartbeatMessage struct {
	Heartbeat *common.Heartbeat `protobuf:"bytes,1,opt,name=heartbeat" json:"heartbeat,omitempty"`
}

func (m *ProposalHeartbeatMessage) Reset()                    { *m = ProposalHeartbeatMessage{} }
func (m *ProposalHeartbeatMessage) String() string            { return proto.CompactTextString(m) }
func (*ProposalHeartbeatMessage) ProtoMessage()               {}
func (*ProposalHeartbeatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ProposalHeartbeatMessage) GetHeartbeat() *common.Heartbeat {
	if m != nil {
		return m.Heartbeat
	}
	return nil
}

func init() {
	proto.RegisterType((*NewRoundStepMessage)(nil), "consensus.NewRoundStepMessage")
	proto.RegisterType((*BitArray)(nil), "consensus.BitArray")
	proto.RegisterType((*CommitStepMessage)(nil), "consensus.CommitStepMessage")
	proto.RegisterType((*Proposal)(nil), "consensus.Proposal")
	proto.RegisterType((*ProposalMessage)(nil), "consensus.ProposalMessage")
	proto.RegisterType((*ProposalPOLMessage)(nil), "consensus.ProposalPOLMessage")
	proto.RegisterType((*SimpleProof)(nil), "consensus.SimpleProof")
	proto.RegisterType((*Part)(nil), "consensus.Part")
	proto.RegisterType((*BlockPartMessage)(nil), "consensus.BlockPartMessage")
	proto.RegisterType((*VoteMessage)(nil), "consensus.VoteMessage")
	proto.RegisterType((*HasVoteMessage)(nil), "consensus.HasVoteMessage")
	proto.RegisterType((*VoteSetMaj23Message)(nil), "consensus.VoteSetMaj23Message")
	proto.RegisterType((*VoteSetBitsMessage)(nil), "consensus.VoteSetBitsMessage")
	proto.RegisterType((*ProposalHeartbeatMessage)(nil), "consensus.ProposalHeartbeatMessage")
	proto.RegisterEnum("consensus.RoundStepType", RoundStepType_name, RoundStepType_value)
}

func init() { proto.RegisterFile("consensus/consensus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xc6, 0xbb, 0x4e, 0x36, 0x7b, 0x92, 0x34, 0xde, 0x59, 0x5a, 0x99, 0xbd, 0x80, 0xc8, 0xe5,
	0x22, 0xad, 0x16, 0x5b, 0x4a, 0x8a, 0x04, 0x57, 0xa8, 0x81, 0x8b, 0x20, 0xfa, 0x13, 0x4d, 0x16,
	0x90, 0xb8, 0x9b, 0x38, 0xa7, 0xb1, 0x69, 0xec, 0xb1, 0x3c, 0x13, 0x96, 0xf0, 0x12, 0x48, 0x88,
	0x17, 0xe0, 0x45, 0x78, 0x07, 0x1e, 0x85, 0x37, 0x40, 0x33, 0xe3, 0xb1, 0xbd, 0x2d, 0x14, 0x16,
	0x09, 0x89, 0xab, 0xcc, 0x77, 0xce, 0xe7, 0x99, 0xef, 0x9c, 0x6f, 0x7e, 0x02, 0xef, 0xc4, 0x3c,
	0x17, 0x98, 0x8b, 0xbd, 0x88, 0xea, 0x51, 0x58, 0x94, 0x5c, 0x72, 0x72, 0x5a, 0x07, 0x2e, 0xce,
	0x63, 0x9e, 0x65, 0x3c, 0x8f, 0xcc, 0x8f, 0xc9, 0x5f, 0xbc, 0xb7, 0xe5, 0x7c, 0xbb, 0xc3, 0x48,
	0xa3, 0xf5, 0xfe, 0x45, 0x24, 0xd3, 0x0c, 0x85, 0x64, 0x59, 0x61, 0x08, 0xc1, 0x6f, 0x0e, 0x9c,
	0x3f, 0xc3, 0x6b, 0xca, 0xf7, 0xf9, 0x66, 0x25, 0xb1, 0x78, 0x8a, 0x42, 0xb0, 0x2d, 0x92, 0x7b,
	0xd0, 0x4d, 0x30, 0xdd, 0x26, 0xd2, 0x77, 0xc6, 0xce, 0xc4, 0xa5, 0x15, 0x22, 0x6f, 0x43, 0xa7,
	0x54, 0x5c, 0xff, 0x68, 0xec, 0x4c, 0x86, 0xd4, 0x00, 0x72, 0x09, 0xae, 0x90, 0x58, 0xf8, 0xc7,
	0x63, 0x67, 0x72, 0x67, 0xea, 0x87, 0x8d, 0xcc, 0x7a, 0xe2, 0xab, 0x43, 0x81, 0x54, 0xb3, 0xc8,
	0x23, 0xb8, 0x2b, 0x30, 0xe6, 0xf9, 0x46, 0xac, 0xd2, 0x3c, 0xc6, 0x95, 0x64, 0xa5, 0xbc, 0x4a,
	0x33, 0xf4, 0x5d, 0x3d, 0xe7, 0x9f, 0x27, 0xc9, 0x04, 0x46, 0x3b, 0x26, 0xe4, 0xa7, 0x3c, 0xcb,
	0x52, 0xa9, 0xa7, 0xf5, 0x3b, 0x9a, 0xff, 0x6a, 0x38, 0x78, 0x04, 0xbd, 0x79, 0x2a, 0x1f, 0x97,
	0x25, 0x3b, 0x10, 0x02, 0xee, 0x3a, 0x95, 0x42, 0x57, 0x31, 0xa4, 0x7a, 0xac, 0x6a, 0xc0, 0x1d,
	0x66, 0xc2, 0x3f, 0x1a, 0x1f, 0x4f, 0x5c, 0x6a, 0x40, 0xf0, 0x8b, 0x03, 0x67, 0x66, 0x96, 0x7f,
	0xd2, 0x87, 0x4f, 0x60, 0xb4, 0xde, 0xf1, 0xf8, 0xe5, 0x92, 0x95, 0x72, 0x81, 0x6c, 0x83, 0xa5,
	0xee, 0x48, 0x7f, 0x7a, 0x37, 0xac, 0x0c, 0x50, 0x99, 0x15, 0x56, 0x49, 0xfa, 0x2a, 0x9b, 0xcc,
	0x00, 0xea, 0x90, 0xd0, 0x8d, 0xeb, 0x4f, 0xcf, 0x5b, 0x8d, 0xb3, 0x15, 0xd0, 0x16, 0x2d, 0xf8,
	0xdd, 0x81, 0xde, 0xb2, 0xe4, 0x05, 0x17, 0x6c, 0x77, 0x4b, 0x8b, 0x3e, 0x82, 0xd3, 0xda, 0xfb,
	0x6a, 0xb9, 0x8b, 0xd0, 0xec, 0x8e, 0xd0, 0xee, 0x8e, 0xf0, 0xca, 0x32, 0x68, 0x43, 0x26, 0x8f,
	0xc1, 0x6b, 0x24, 0x54, 0xb5, 0xba, 0x6f, 0xaa, 0xf5, 0x35, 0x3a, 0xb9, 0x80, 0xde, 0xf2, 0xf9,
	0x93, 0xc6, 0xb4, 0x0e, 0xad, 0x31, 0x79, 0x17, 0x40, 0xa4, 0xdb, 0x9c, 0xc9, 0xfd, 0xbe, 0x44,
	0xbf, 0x3b, 0x76, 0x26, 0x03, 0xda, 0x8a, 0x04, 0x73, 0x18, 0xd9, 0x92, 0xad, 0x29, 0x51, 0xd3,
	0x05, 0x5d, 0xfb, 0xcd, 0xce, 0xd9, 0x14, 0xad, 0x49, 0xc1, 0x8f, 0x0e, 0x10, 0x0b, 0x96, 0xcf,
	0x9f, 0xfc, 0x9d, 0xb9, 0x0f, 0xc1, 0x2b, 0x1a, 0x36, 0x6d, 0x35, 0xf3, 0xb5, 0x38, 0xf9, 0x10,
	0xfa, 0xad, 0xd8, 0x9b, 0x8c, 0x6c, 0xf3, 0x82, 0xfb, 0xd0, 0x5f, 0xa5, 0x59, 0xb1, 0xc3, 0x65,
	0xc9, 0xf9, 0x0b, 0xe5, 0x19, 0xdb, 0xe7, 0x7a, 0x9f, 0x1e, 0x4f, 0x06, 0xd4, 0x80, 0x40, 0x82,
	0xab, 0xba, 0xa8, 0xb2, 0x69, 0xbe, 0xc1, 0xef, 0x2b, 0x99, 0x06, 0xa8, 0xe8, 0xfa, 0x20, 0x51,
	0x68, 0x69, 0x03, 0x6a, 0x00, 0xb9, 0x84, 0x4e, 0xa1, 0xa6, 0xac, 0x94, 0xdc, 0x6b, 0x29, 0x69,
	0x2d, 0x48, 0x0d, 0x49, 0x1d, 0x8f, 0x84, 0x89, 0x44, 0xfb, 0x39, 0xa0, 0x7a, 0x1c, 0x20, 0x78,
	0x73, 0x6b, 0xe0, 0xbf, 0xbb, 0x0e, 0xee, 0x83, 0x5b, 0xb0, 0x52, 0x56, 0x12, 0x46, 0x6d, 0x6f,
	0x58, 0x29, 0xa9, 0x4e, 0x06, 0x11, 0xf4, 0xbf, 0xe2, 0x12, 0xed, 0x0a, 0x63, 0x70, 0xbf, 0xe3,
	0x12, 0x2b, 0x3f, 0x07, 0x76, 0x67, 0x29, 0x0a, 0xd5, 0x99, 0xe0, 0x07, 0xb8, 0xb3, 0x60, 0xa2,
	0xfd, 0xcd, 0xed, 0x54, 0xbd, 0x0f, 0xae, 0x3c, 0x14, 0x58, 0x5d, 0x52, 0x5e, 0x7b, 0x05, 0x73,
	0x39, 0xa9, 0x6c, 0xd3, 0x6b, 0x73, 0x19, 0x19, 0x10, 0xfc, 0xec, 0xc0, 0xb9, 0x22, 0xae, 0x50,
	0x3e, 0x65, 0xdf, 0x4e, 0x67, 0xff, 0xa5, 0x82, 0x07, 0x70, 0xa2, 0x0f, 0xd0, 0xe7, 0x9f, 0x55,
	0xc7, 0x6c, 0x64, 0x89, 0x73, 0x13, 0xa6, 0x36, 0x1f, 0xfc, 0xea, 0x00, 0xa9, 0x64, 0xcd, 0x53,
	0x29, 0xfe, 0x1f, 0xaa, 0xc8, 0x03, 0xe8, 0x28, 0xc3, 0x84, 0x3e, 0xea, 0x7f, 0x71, 0x18, 0x0c,
	0x23, 0xf8, 0x02, 0x7c, 0x7b, 0x2e, 0x17, 0xc8, 0x4a, 0xb9, 0x46, 0x26, 0x9b, 0x53, 0x7e, 0x9a,
	0xd8, 0x58, 0xb5, 0x2d, 0xce, 0xec, 0x9a, 0x35, 0x99, 0x36, 0x9c, 0x87, 0x3f, 0x39, 0x30, 0xbc,
	0xf1, 0xde, 0x90, 0x3e, 0x9c, 0x7c, 0x99, 0xbf, 0xcc, 0xf9, 0x75, 0xee, 0xbd, 0x45, 0x86, 0x70,
	0xfa, 0x0c, 0xaf, 0x17, 0xba, 0x15, 0x9e, 0x43, 0x06, 0xd0, 0xb3, 0x0f, 0x9f, 0x77, 0xa4, 0x98,
	0x46, 0x08, 0x7a, 0xc7, 0x06, 0xa0, 0x52, 0xe8, 0xb9, 0x64, 0x04, 0xfd, 0x0a, 0x7c, 0xcd, 0x52,
	0xe9, 0x75, 0xd4, 0x3c, 0xcb, 0x12, 0x63, 0xfd, 0x54, 0x78, 0x5d, 0x72, 0x06, 0xc3, 0x1a, 0x6a,
	0xc6, 0x09, 0x01, 0xe8, 0x9a, 0x97, 0xc4, 0xeb, 0xcd, 0x63, 0xb8, 0xe4, 0xe5, 0x36, 0xfc, 0x58,
	0x26, 0x71, 0xc2, 0xd2, 0x3c, 0xd4, 0x4d, 0xd2, 0xc3, 0x0f, 0x8a, 0x69, 0xf5, 0x0a, 0x8b, 0xa6,
	0x43, 0xdf, 0xcc, 0xb6, 0xa9, 0x4c, 0xf6, 0x6b, 0x55, 0x68, 0x64, 0x3f, 0x8a, 0x6e, 0x7e, 0x64,
	0x5e, 0xf3, 0xd6, 0x9f, 0x81, 0x75, 0x57, 0x47, 0x66, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x63,
	0xe9, 0x41, 0x40, 0x2a, 0x08, 0x00, 0x00,
}
