// Code generated by protoc-gen-go.
// source: common/common.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	common/common.proto

It has these top-level messages:
	PartSetHeader
	BlockID
	Header
	Tx
	Data
	Vote
	DuplicatedVoteEvidence
	Evidence
	EvidenceData
	Commit
	Block
	Heartbeat
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import crypto "github.com/9thchain/blockchain-p2p/protos/crypto"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VoteType int32

const (
	VoteType_UnVote    VoteType = 0
	VoteType_PreVote   VoteType = 1
	VoteType_PreCommit VoteType = 2
)

var VoteType_name = map[int32]string{
	0: "UnVote",
	1: "PreVote",
	2: "PreCommit",
}
var VoteType_value = map[string]int32{
	"UnVote":    0,
	"PreVote":   1,
	"PreCommit": 2,
}

func (x VoteType) String() string {
	return proto.EnumName(VoteType_name, int32(x))
}
func (VoteType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PartSetHeader struct {
	Total uint32 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *PartSetHeader) Reset()                    { *m = PartSetHeader{} }
func (m *PartSetHeader) String() string            { return proto.CompactTextString(m) }
func (*PartSetHeader) ProtoMessage()               {}
func (*PartSetHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BlockID struct {
	Hash        []byte         `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PartsHeader *PartSetHeader `protobuf:"bytes,2,opt,name=partsHeader" json:"partsHeader,omitempty"`
}

func (m *BlockID) Reset()                    { *m = BlockID{} }
func (m *BlockID) String() string            { return proto.CompactTextString(m) }
func (*BlockID) ProtoMessage()               {}
func (*BlockID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockID) GetPartsHeader() *PartSetHeader {
	if m != nil {
		return m.PartsHeader
	}
	return nil
}

type Header struct {
	ChainID         string                     `protobuf:"bytes,1,opt,name=chainID" json:"chainID,omitempty"`
	Height          uint64                     `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Time            *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	NumTxs          uint64                     `protobuf:"varint,4,opt,name=numTxs" json:"numTxs,omitempty"`
	LastBlockID     *BlockID                   `protobuf:"bytes,5,opt,name=lastBlockID" json:"lastBlockID,omitempty"`
	TotalTxs        uint64                     `protobuf:"varint,6,opt,name=totalTxs" json:"totalTxs,omitempty"`
	LastCommitHash  []byte                     `protobuf:"bytes,7,opt,name=lastCommitHash,proto3" json:"lastCommitHash,omitempty"`
	DataHash        []byte                     `protobuf:"bytes,8,opt,name=dataHash,proto3" json:"dataHash,omitempty"`
	ValidatorHash   []byte                     `protobuf:"bytes,9,opt,name=validatorHash,proto3" json:"validatorHash,omitempty"`
	ConsensusHash   []byte                     `protobuf:"bytes,10,opt,name=consensusHash,proto3" json:"consensusHash,omitempty"`
	AppHash         []byte                     `protobuf:"bytes,11,opt,name=appHash,proto3" json:"appHash,omitempty"`
	LastResultsHash []byte                     `protobuf:"bytes,12,opt,name=lastResultsHash,proto3" json:"lastResultsHash,omitempty"`
	EvidenceHash    []byte                     `protobuf:"bytes,13,opt,name=evidenceHash,proto3" json:"evidenceHash,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Header) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Header) GetLastBlockID() *BlockID {
	if m != nil {
		return m.LastBlockID
	}
	return nil
}

type Tx struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Data struct {
	Txs  []*Tx  `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Data) GetTxs() []*Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Vote struct {
	ValidatorAddress []byte                     `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	ValidatorIndex   uint32                     `protobuf:"varint,2,opt,name=validatorIndex" json:"validatorIndex,omitempty"`
	Height           uint64                     `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Round            uint32                     `protobuf:"varint,4,opt,name=round" json:"round,omitempty"`
	Timestamp        *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Type             VoteType                   `protobuf:"varint,6,opt,name=type,enum=common.VoteType" json:"type,omitempty"`
	BlockID          *BlockID                   `protobuf:"bytes,7,opt,name=blockID" json:"blockID,omitempty"`
	Signature        []byte                     `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Vote) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Vote) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

type DuplicatedVoteEvidence struct {
	// Types that are valid to be assigned to PubKey:
	//	*DuplicatedVoteEvidence_PubKeyEd25519
	//	*DuplicatedVoteEvidence_PubKeySecp256K1
	PubKey isDuplicatedVoteEvidence_PubKey `protobuf_oneof:"pubKey"`
	VoteA  *Vote                           `protobuf:"bytes,3,opt,name=voteA" json:"voteA,omitempty"`
	VoteB  *Vote                           `protobuf:"bytes,4,opt,name=voteB" json:"voteB,omitempty"`
}

func (m *DuplicatedVoteEvidence) Reset()                    { *m = DuplicatedVoteEvidence{} }
func (m *DuplicatedVoteEvidence) String() string            { return proto.CompactTextString(m) }
func (*DuplicatedVoteEvidence) ProtoMessage()               {}
func (*DuplicatedVoteEvidence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isDuplicatedVoteEvidence_PubKey interface {
	isDuplicatedVoteEvidence_PubKey()
}

type DuplicatedVoteEvidence_PubKeyEd25519 struct {
	PubKeyEd25519 *crypto.PubKeyEd25519 `protobuf:"bytes,1,opt,name=pubKeyEd25519,oneof"`
}
type DuplicatedVoteEvidence_PubKeySecp256K1 struct {
	PubKeySecp256K1 *crypto.PubKeySecp256K1 `protobuf:"bytes,2,opt,name=pubKeySecp256k1,oneof"`
}

func (*DuplicatedVoteEvidence_PubKeyEd25519) isDuplicatedVoteEvidence_PubKey()   {}
func (*DuplicatedVoteEvidence_PubKeySecp256K1) isDuplicatedVoteEvidence_PubKey() {}

func (m *DuplicatedVoteEvidence) GetPubKey() isDuplicatedVoteEvidence_PubKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *DuplicatedVoteEvidence) GetPubKeyEd25519() *crypto.PubKeyEd25519 {
	if x, ok := m.GetPubKey().(*DuplicatedVoteEvidence_PubKeyEd25519); ok {
		return x.PubKeyEd25519
	}
	return nil
}

func (m *DuplicatedVoteEvidence) GetPubKeySecp256K1() *crypto.PubKeySecp256K1 {
	if x, ok := m.GetPubKey().(*DuplicatedVoteEvidence_PubKeySecp256K1); ok {
		return x.PubKeySecp256K1
	}
	return nil
}

func (m *DuplicatedVoteEvidence) GetVoteA() *Vote {
	if m != nil {
		return m.VoteA
	}
	return nil
}

func (m *DuplicatedVoteEvidence) GetVoteB() *Vote {
	if m != nil {
		return m.VoteB
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DuplicatedVoteEvidence) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DuplicatedVoteEvidence_OneofMarshaler, _DuplicatedVoteEvidence_OneofUnmarshaler, _DuplicatedVoteEvidence_OneofSizer, []interface{}{
		(*DuplicatedVoteEvidence_PubKeyEd25519)(nil),
		(*DuplicatedVoteEvidence_PubKeySecp256K1)(nil),
	}
}

func _DuplicatedVoteEvidence_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DuplicatedVoteEvidence)
	// pubKey
	switch x := m.PubKey.(type) {
	case *DuplicatedVoteEvidence_PubKeyEd25519:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PubKeyEd25519); err != nil {
			return err
		}
	case *DuplicatedVoteEvidence_PubKeySecp256K1:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PubKeySecp256K1); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DuplicatedVoteEvidence.PubKey has unexpected type %T", x)
	}
	return nil
}

func _DuplicatedVoteEvidence_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DuplicatedVoteEvidence)
	switch tag {
	case 1: // pubKey.pubKeyEd25519
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(crypto.PubKeyEd25519)
		err := b.DecodeMessage(msg)
		m.PubKey = &DuplicatedVoteEvidence_PubKeyEd25519{msg}
		return true, err
	case 2: // pubKey.pubKeySecp256k1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(crypto.PubKeySecp256K1)
		err := b.DecodeMessage(msg)
		m.PubKey = &DuplicatedVoteEvidence_PubKeySecp256K1{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DuplicatedVoteEvidence_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DuplicatedVoteEvidence)
	// pubKey
	switch x := m.PubKey.(type) {
	case *DuplicatedVoteEvidence_PubKeyEd25519:
		s := proto.Size(x.PubKeyEd25519)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DuplicatedVoteEvidence_PubKeySecp256K1:
		s := proto.Size(x.PubKeySecp256K1)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Evidence struct {
	// Types that are valid to be assigned to Evidence:
	//	*Evidence_DupEvidence
	Evidence isEvidence_Evidence `protobuf_oneof:"evidence"`
}

func (m *Evidence) Reset()                    { *m = Evidence{} }
func (m *Evidence) String() string            { return proto.CompactTextString(m) }
func (*Evidence) ProtoMessage()               {}
func (*Evidence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isEvidence_Evidence interface {
	isEvidence_Evidence()
}

type Evidence_DupEvidence struct {
	DupEvidence *DuplicatedVoteEvidence `protobuf:"bytes,1,opt,name=dupEvidence,oneof"`
}

func (*Evidence_DupEvidence) isEvidence_Evidence() {}

func (m *Evidence) GetEvidence() isEvidence_Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *Evidence) GetDupEvidence() *DuplicatedVoteEvidence {
	if x, ok := m.GetEvidence().(*Evidence_DupEvidence); ok {
		return x.DupEvidence
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Evidence) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Evidence_OneofMarshaler, _Evidence_OneofUnmarshaler, _Evidence_OneofSizer, []interface{}{
		(*Evidence_DupEvidence)(nil),
	}
}

func _Evidence_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Evidence)
	// evidence
	switch x := m.Evidence.(type) {
	case *Evidence_DupEvidence:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DupEvidence); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Evidence.Evidence has unexpected type %T", x)
	}
	return nil
}

func _Evidence_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Evidence)
	switch tag {
	case 1: // evidence.dupEvidence
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DuplicatedVoteEvidence)
		err := b.DecodeMessage(msg)
		m.Evidence = &Evidence_DupEvidence{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Evidence_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Evidence)
	// evidence
	switch x := m.Evidence.(type) {
	case *Evidence_DupEvidence:
		s := proto.Size(x.DupEvidence)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EvidenceData struct {
	Evidence []*Evidence `protobuf:"bytes,1,rep,name=evidence" json:"evidence,omitempty"`
	Hash     []byte      `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *EvidenceData) Reset()                    { *m = EvidenceData{} }
func (m *EvidenceData) String() string            { return proto.CompactTextString(m) }
func (*EvidenceData) ProtoMessage()               {}
func (*EvidenceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EvidenceData) GetEvidence() []*Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

type Commit struct {
	BlockID    *BlockID `protobuf:"bytes,1,opt,name=blockID" json:"blockID,omitempty"`
	Precommits []*Vote  `protobuf:"bytes,2,rep,name=Precommits" json:"Precommits,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Commit) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *Commit) GetPrecommits() []*Vote {
	if m != nil {
		return m.Precommits
	}
	return nil
}

type Block struct {
	Header     *Header       `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Data       *Data         `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Evidence   *EvidenceData `protobuf:"bytes,3,opt,name=evidence" json:"evidence,omitempty"`
	LastCommit *Commit       `protobuf:"bytes,4,opt,name=lastCommit" json:"lastCommit,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Block) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Block) GetEvidence() *EvidenceData {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *Block) GetLastCommit() *Commit {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

type Heartbeat struct {
	ValidatorAddress []byte `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	ValidatorIndex   uint32 `protobuf:"varint,2,opt,name=validatorIndex" json:"validatorIndex,omitempty"`
	Height           uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Round            uint32 `protobuf:"varint,4,opt,name=round" json:"round,omitempty"`
	Sequence         uint32 `protobuf:"varint,5,opt,name=sequence" json:"sequence,omitempty"`
	Signature        []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*PartSetHeader)(nil), "common.PartSetHeader")
	proto.RegisterType((*BlockID)(nil), "common.BlockID")
	proto.RegisterType((*Header)(nil), "common.Header")
	proto.RegisterType((*Tx)(nil), "common.Tx")
	proto.RegisterType((*Data)(nil), "common.Data")
	proto.RegisterType((*Vote)(nil), "common.Vote")
	proto.RegisterType((*DuplicatedVoteEvidence)(nil), "common.DuplicatedVoteEvidence")
	proto.RegisterType((*Evidence)(nil), "common.Evidence")
	proto.RegisterType((*EvidenceData)(nil), "common.EvidenceData")
	proto.RegisterType((*Commit)(nil), "common.Commit")
	proto.RegisterType((*Block)(nil), "common.Block")
	proto.RegisterType((*Heartbeat)(nil), "common.Heartbeat")
	proto.RegisterEnum("common.VoteType", VoteType_name, VoteType_value)
}

func init() { proto.RegisterFile("common/common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0x5f, 0x8f, 0xda, 0x46,
	0x10, 0x3f, 0xf3, 0xc7, 0xc0, 0x00, 0x77, 0xa7, 0xcd, 0x35, 0x45, 0x28, 0x4a, 0x4f, 0x56, 0x14,
	0x5d, 0xa2, 0xd4, 0xe4, 0xa8, 0xae, 0xcd, 0x3d, 0xf4, 0x21, 0xe4, 0x22, 0x71, 0xea, 0x0b, 0xda,
	0xd0, 0x3c, 0x44, 0xea, 0xc3, 0x62, 0x6f, 0xc1, 0x0a, 0xd8, 0xae, 0x77, 0x7d, 0x82, 0x8f, 0x55,
	0xf5, 0x43, 0x54, 0xfd, 0x32, 0xfd, 0x0c, 0xd5, 0xce, 0xee, 0x1a, 0x9b, 0xa2, 0xf6, 0x35, 0x4f,
	0xf0, 0x9b, 0xf9, 0xed, 0xcc, 0xce, 0xcc, 0x6f, 0x16, 0xe0, 0x51, 0x90, 0x6c, 0x36, 0x49, 0x3c,
	0xd2, 0x1f, 0x7e, 0x9a, 0x25, 0x32, 0x21, 0xae, 0x46, 0xc3, 0x47, 0x41, 0xb6, 0x4b, 0x65, 0x32,
	0xd2, 0x1f, 0xda, 0x39, 0xfc, 0x66, 0x99, 0x24, 0xcb, 0x35, 0x1f, 0x21, 0x5a, 0xe4, 0xbf, 0x8e,
	0x64, 0xb4, 0xe1, 0x42, 0xb2, 0x4d, 0xaa, 0x09, 0xde, 0x2d, 0xf4, 0x67, 0x2c, 0x93, 0x1f, 0xb8,
	0x9c, 0x72, 0x16, 0xf2, 0x8c, 0x5c, 0x40, 0x53, 0x26, 0x92, 0xad, 0x07, 0xce, 0xa5, 0x73, 0xd5,
	0xa7, 0x1a, 0x10, 0x02, 0x8d, 0x15, 0x13, 0xab, 0x41, 0xed, 0xd2, 0xb9, 0xea, 0x51, 0xfc, 0xee,
	0x7d, 0x84, 0xd6, 0x64, 0x9d, 0x04, 0x9f, 0xef, 0xef, 0x0a, 0xb7, 0xb3, 0x77, 0x93, 0x1f, 0xa0,
	0x9b, 0xb2, 0x4c, 0x0a, 0x1d, 0x17, 0x4f, 0x76, 0xc7, 0x5f, 0xf9, 0xe6, 0xee, 0x95, 0xa4, 0xb4,
	0xcc, 0xf4, 0xfe, 0xaa, 0x83, 0x6b, 0x2e, 0x33, 0x80, 0x56, 0xb0, 0x62, 0x51, 0x7c, 0x7f, 0x87,
	0xa1, 0x3b, 0xd4, 0x42, 0xf2, 0x18, 0xdc, 0x15, 0x8f, 0x96, 0x2b, 0x89, 0x81, 0x1b, 0xd4, 0x20,
	0xe2, 0x43, 0x43, 0x95, 0x38, 0xa8, 0x63, 0xba, 0xa1, 0xaf, 0xeb, 0xf7, 0x6d, 0xfd, 0xfe, 0xdc,
	0xd6, 0x4f, 0x91, 0xa7, 0xe2, 0xc4, 0xf9, 0x66, 0xbe, 0x15, 0x83, 0x86, 0x8e, 0xa3, 0x11, 0xb9,
	0x86, 0xee, 0x9a, 0x09, 0x69, 0x0a, 0x1c, 0x34, 0x31, 0xdc, 0x99, 0xbd, 0xbd, 0x31, 0xd3, 0x32,
	0x87, 0x0c, 0xa1, 0x8d, 0xcd, 0x52, 0xc1, 0x5c, 0x0c, 0x56, 0x60, 0xf2, 0x1c, 0x4e, 0x15, 0xf5,
	0x5d, 0xb2, 0xd9, 0x44, 0x72, 0xaa, 0x5a, 0xd5, 0xc2, 0x56, 0x1d, 0x58, 0x55, 0x8c, 0x90, 0x49,
	0x86, 0x8c, 0x36, 0x32, 0x0a, 0x4c, 0x9e, 0x41, 0xff, 0x81, 0xad, 0xa3, 0x90, 0xc9, 0x24, 0x43,
	0x42, 0x07, 0x09, 0x55, 0xa3, 0x62, 0x05, 0x49, 0x2c, 0x78, 0x2c, 0x72, 0x81, 0x2c, 0xd0, 0xac,
	0x8a, 0x51, 0x35, 0x96, 0xa5, 0x29, 0xfa, 0xbb, 0xe8, 0xb7, 0x90, 0x5c, 0xc1, 0x99, 0xba, 0x13,
	0xe5, 0x22, 0x5f, 0x4b, 0x1d, 0xa1, 0x87, 0x8c, 0x43, 0x33, 0xf1, 0xa0, 0xc7, 0x1f, 0xa2, 0x90,
	0xc7, 0x01, 0x47, 0x5a, 0x1f, 0x69, 0x15, 0x9b, 0xf7, 0x14, 0x6a, 0xf3, 0xad, 0xca, 0x96, 0xb2,
	0xdd, 0x3a, 0x61, 0xa1, 0x51, 0x88, 0x85, 0xde, 0x1b, 0x68, 0xdc, 0x31, 0xc9, 0xc8, 0x13, 0xa8,
	0xcb, 0xad, 0x18, 0x38, 0x97, 0xf5, 0xab, 0xee, 0x18, 0x6c, 0x9b, 0xe7, 0x5b, 0xaa, 0xcc, 0x47,
	0xd5, 0xf7, 0x7b, 0x0d, 0x1a, 0x1f, 0x13, 0xc9, 0xc9, 0x4b, 0x38, 0x2f, 0x3a, 0xf0, 0x36, 0x0c,
	0x33, 0x2e, 0x84, 0xc9, 0xf2, 0x2f, 0xbb, 0x1a, 0x43, 0x61, 0xbb, 0x8f, 0x43, 0xbe, 0xc5, 0x90,
	0x7d, 0x7a, 0x60, 0x2d, 0xa9, 0xab, 0x5e, 0x51, 0xd7, 0x05, 0x34, 0xb3, 0x24, 0x8f, 0x43, 0x14,
	0x4b, 0x9f, 0x6a, 0x40, 0xde, 0x40, 0xa7, 0x58, 0x2b, 0xa3, 0x94, 0xff, 0x12, 0xde, 0x9e, 0x4c,
	0x9e, 0x41, 0x43, 0xee, 0x52, 0x8e, 0x72, 0x39, 0x1d, 0x9f, 0xdb, 0xba, 0x55, 0x5d, 0xf3, 0x5d,
	0xca, 0x29, 0x7a, 0xc9, 0x0b, 0x68, 0x2d, 0x8c, 0x0e, 0x5b, 0xc7, 0x75, 0x68, 0xfd, 0xe4, 0x09,
	0x74, 0x44, 0xb4, 0x8c, 0x99, 0xcc, 0x33, 0x6e, 0x04, 0xb4, 0x37, 0x78, 0x7f, 0x3b, 0xf0, 0xf8,
	0x2e, 0x4f, 0xd7, 0x51, 0xc0, 0x24, 0x0f, 0x55, 0x96, 0xf7, 0x66, 0x58, 0xe4, 0x47, 0xe8, 0xa7,
	0xf9, 0xe2, 0x27, 0xbe, 0x7b, 0x1f, 0x8e, 0x6f, 0x6e, 0xae, 0x6f, 0xb1, 0x85, 0xb8, 0xaf, 0xfa,
	0x39, 0x99, 0x95, 0x9d, 0xd3, 0x13, 0x5a, 0x65, 0x93, 0x77, 0x70, 0xa6, 0x0d, 0x1f, 0x78, 0x90,
	0x8e, 0x6f, 0xbe, 0xff, 0x7c, 0x6d, 0x16, 0xfe, 0xeb, 0x6a, 0x80, 0xc2, 0x3d, 0x3d, 0xa1, 0x87,
	0x27, 0x88, 0x07, 0xcd, 0x87, 0x44, 0xf2, 0xb7, 0x66, 0x79, 0x7b, 0xe5, 0x76, 0x50, 0xed, 0xb2,
	0x9c, 0x09, 0x4e, 0xe0, 0x28, 0x67, 0x32, 0x69, 0x83, 0xab, 0x43, 0x7b, 0x9f, 0xa0, 0x5d, 0x54,
	0x38, 0x81, 0x6e, 0x98, 0xa7, 0x16, 0x9a, 0xfa, 0x9e, 0xda, 0xf3, 0xc7, 0xdb, 0x32, 0x3d, 0xa1,
	0xe5, 0x43, 0x13, 0x80, 0xb6, 0x95, 0xb7, 0x37, 0x83, 0x9e, 0xb5, 0xa3, 0x84, 0x5f, 0xed, 0x7d,
	0x46, 0xc7, 0xc5, 0x3c, 0x2d, 0x8f, 0x16, 0x8c, 0xa3, 0x92, 0x66, 0xe0, 0xea, 0xa7, 0xa0, 0x3c,
	0x71, 0xe7, 0x7f, 0x26, 0xfe, 0x0a, 0x60, 0x96, 0xf1, 0x00, 0xcf, 0x89, 0x41, 0x0d, 0x13, 0x57,
	0xbb, 0x52, 0xf2, 0x7b, 0x7f, 0x38, 0xd0, 0xc4, 0x10, 0xe4, 0xb9, 0x92, 0x38, 0xbe, 0xcc, 0x3a,
	0xc3, 0xa9, 0x3d, 0x63, 0x9e, 0x64, 0xe3, 0x25, 0x97, 0xd0, 0x50, 0x2f, 0x90, 0x19, 0x67, 0x11,
	0x59, 0x95, 0x4c, 0xd1, 0x43, 0x5e, 0x97, 0x0a, 0xd7, 0x93, 0xbb, 0x38, 0x2c, 0x1c, 0xd9, 0xfb,
	0xe2, 0x7d, 0x80, 0xfd, 0xbb, 0x67, 0x26, 0x59, 0xe4, 0xd7, 0x56, 0x5a, 0x62, 0x78, 0x7f, 0x3a,
	0xd0, 0x99, 0x72, 0x96, 0xc9, 0x05, 0x67, 0xf2, 0x0b, 0x58, 0xf8, 0x21, 0xb4, 0x05, 0xff, 0x2d,
	0xc7, 0x8a, 0x9b, 0xe8, 0x28, 0x70, 0x75, 0x03, 0xdd, 0x83, 0x0d, 0x7c, 0x39, 0x86, 0xb6, 0x5d,
	0x6e, 0x02, 0xe0, 0xfe, 0x1c, 0x2b, 0x74, 0x7e, 0x42, 0xba, 0xd0, 0x9a, 0x65, 0x1c, 0x81, 0x43,
	0xfa, 0xd0, 0x99, 0x65, 0x5c, 0xd7, 0x7e, 0x5e, 0x9b, 0xfc, 0x02, 0x2f, 0x92, 0x6c, 0xe9, 0xdf,
	0xca, 0x15, 0xfe, 0xf8, 0xf9, 0x38, 0x79, 0xfc, 0xfa, 0x6d, 0x3a, 0x36, 0xbf, 0xe3, 0xc2, 0x74,
	0xef, 0xd3, 0xeb, 0x65, 0x24, 0x57, 0xf9, 0x42, 0xc1, 0x91, 0x3d, 0x31, 0xaa, 0x9e, 0xd0, 0x7f,
	0x06, 0x84, 0xf9, 0x17, 0xb1, 0x70, 0x11, 0x7e, 0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85,
	0xc7, 0x35, 0x3a, 0x5d, 0x08, 0x00, 0x00,
}
